// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

/*
1) Calculate the medians m1 and m2 of the input arrays ar1[] 
   and ar2[] respectively.
2) If m1 and m2 both are equal then we are done.
     return m1 (or m2)
3) If m1 is greater than m2, then median is present in one 
   of the below two subarrays.
    a)  From first element of ar1 to m1 (ar1[0...|_n/2_|])
    b)  From m2 to last element of ar2  (ar2[|_n/2_|...n-1])
4) If m2 is greater than m1, then median is present in one    
   of the below two subarrays.
   a)  From m1 to last element of ar1  (ar1[|_n/2_|...n-1])
   b)  From first element of ar2 to m2 (ar2[0...|_n/2_|])
5) Repeat the above process until size of both the subarrays 
   becomes 2.
6) If size of the two arrays is 2 then use below formula to get 
  the median.
    Median = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2

*/

int median(int arr[],int n){
    if(n%2==0){
        return (arr[n/2]+arr[n/2-1])/2;
    }
    else{
        return arr[n/2];
    }
}
int getMedian(int arr1[],int arr2[],int n){
    if(n<=0){
        return -1;
    }
    if(n==1){
        return (arr1[0]+arr2[0])/2;
    }
    if(n==2){
        return ((max(arr1[0],arr2[0])+min(arr1[1],arr2[1]))/2);
    }
    //Handle with recursion
    int firstmedian=median(arr1,n);
    int secondmedian=median(arr2,n);
    if(firstmedian==secondmedian){
        return firstmedian;
    }
    if(firstmedian>secondmedian){
        if(n%2==0){
           return getMedian(arr2 + n / 2 - 1,arr1, n - n / 2 + 1);
           
        }
          return getMedian(arr2 + n / 2,arr1, n - n / 2);
        
    }
    else{
         if (n % 2 == 0)
            return getMedian(arr1 + n / 2 - 1,arr2, n - n / 2 + 1);
        return getMedian(arr1 + n / 2,arr2, n - n / 2);
    
    }
}
int main() {
    //Median of two sorted arrays of same size
    //https://www.geeksforgeeks.org/median-of-two-sorted-arrays/
    
    int ar1[] = {1, 12, 15, 26, 38};
    int ar2[] = {2, 13, 17, 30, 45};
    int n=5;
    cout<<getMedian(ar1,ar2,n)<<endl;

    return 0;
}
