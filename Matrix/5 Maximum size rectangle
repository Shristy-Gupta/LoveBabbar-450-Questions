#include <stack>
class Solution {
public:
    int find_current_area(vector<int>& height){
        //This is same as finding largest rectangle in the histogram
        int n=height.size();
        if(n==0){
            return 0;
        }
        else if(n==1){
            return height[0];
        }
        int maxval=0;
        stack<int> stk;
        //here we will add index
        stk.push(0);
        for(int i=1;i<n;i++){
           int curr=height[i];
           if(curr>=height[stk.top()]){
               stk.push(i);
           }
           else{
               while(!stk.empty() && curr<height[stk.top()]){
                   int temp=height[stk.top()];
                   stk.pop();
                   if(stk.empty()){
                       //area of last block
                       maxval=max(maxval,temp*i);
                   }
                   else{
                       // Did not understand the -1 part
                       maxval=max(maxval,temp*(i-stk.top()-1));
                       
                   }
               }
               stk.push(i);
           }
            
        }
        if(!stk.empty()){
            int i=n;
            while(!stk.empty()){
                   int temp=height[stk.top()];
                   stk.pop();
                   if(stk.empty()){
                       //area of last block
                       maxval=max(maxval,temp*i);
                   }
                   else{
                       // Did not understand the -1 part
                       maxval=max(maxval,temp*(i-stk.top()-1));
                       
                   }
               }
            
        }
        return maxval;
        
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int row= matrix.size(),area=0;
        if(row==0){
            return 0;
        } 
        int cols=matrix[0].size();
        vector<int> height(cols,0);
        for(int i=0;i<row;i++){
            for(int j=0;j<cols;j++){
                if(matrix[i][j]=='0'){
                    height[j]=0;
                }
                else{
                    height[j]+=1;
                }
            }
            area=max(area,find_current_area(height));
        }
        return area;
    }
};
